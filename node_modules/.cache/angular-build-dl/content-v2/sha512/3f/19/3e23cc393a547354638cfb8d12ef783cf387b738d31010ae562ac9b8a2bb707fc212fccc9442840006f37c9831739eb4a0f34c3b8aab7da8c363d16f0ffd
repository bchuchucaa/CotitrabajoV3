{"version":3,"sources":["webpack:///src/app/components/verify-email/verify-email.page.html","webpack:///src/app/components/verify-email/verify-email-routing.module.ts","webpack:///src/app/components/verify-email/verify-email.module.ts","webpack:///src/app/components/verify-email/verify-email.page.scss","webpack:///src/app/components/verify-email/verify-email.page.ts","webpack:///src/app/services/auth.service.ts"],"names":["routes","path","component","VerifyEmailPageRoutingModule","imports","forChild","exports","VerifyEmailPageModule","declarations","VerifyEmailPage","authService","user$","afaAuth","user","sendVerificationEmail","console","log","logout","selector","template","AuthService","afs","authState","pipe","doc","uid","valueChanges","signInWithPopup","auth","GoogleAuthProvider","email","sendPasswordResetEmail","password","signInWithEmailAndPassword","updateUserData","createUserWithEmailAndPassword","currentUser","sendEmailVerification","emailVerified","signOut","userRef","data","displayName","set","merge","providedIn"],"mappings":"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","file":"components-verify-email-verify-email-module-es5.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-title>Verifica tu correo</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content *ngIf=\\\"user$ | async as user\\\">\\n    <ion-row>\\n        <ion-col>Gracias por registrarte :)</ion-col>\\n        <p>Te enviamos un correo de verificacion </p>\\n        <p>Por favor verifica tu correo clickeando sobre este link</p>\\n    </ion-row>\\n    <ion-row>\\n        <ion-col>\\n            <ion-button type=\\\"submit\\\" color=\\\"primary\\\" expand=\\\"block\\\" (click)=\\\" onSendEmail() \\\">Reenviar el correo de verificacion</ion-button>\\n        </ion-col>\\n    </ion-row>\\n\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { VerifyEmailPage } from './verify-email.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: VerifyEmailPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class VerifyEmailPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { VerifyEmailPageRoutingModule } from './verify-email-routing.module';\n\nimport { VerifyEmailPage } from './verify-email.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    VerifyEmailPageRoutingModule\n  ],\n  declarations: [VerifyEmailPage]\n})\nexport class VerifyEmailPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdmVyaWZ5LWVtYWlsL3ZlcmlmeS1lbWFpbC5wYWdlLnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../../services/auth.service';\nimport auth from 'firebase/app';\nimport { User } from 'src/app/shared/user.interface';\n\n@Component({\n  selector: 'app-verify-email',\n  templateUrl: './verify-email.page.html',\n  styleUrls: ['./verify-email.page.scss'],\n})\nexport class VerifyEmailPage implements OnInit {\n  user$:Observable<User> = this.authService.afaAuth.user;\n\n  constructor(private authService:AuthService) { }\n\n  ngOnInit() {\n  }\n  async onSendEmail():Promise<void>{\n    try {\n     await this.authService.sendVerificationEmail();\n\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  ngOnDestroy(){\n    this.authService.logout();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { User } from '../shared/user.interface';\nimport { AngularFireAuth} from '@angular/fire/auth';\nimport auth from 'firebase/app';\n\nimport {AngularFirestore,AngularFirestoreDocument} from '@angular/fire/firestore'\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  public user$:Observable<User>;\n\n  constructor(public afaAuth:AngularFireAuth, private afs:AngularFirestore) { \n    this.user$ = this.afaAuth.authState.pipe(\n      switchMap((user) => {\n        if(user){\n          this.afs.doc<User>(`users/${user.uid}`).valueChanges();\n        }\n        return of(null);\n      })\n    );\n  }\n\n  async loginGoogle():Promise<User>{\n    try {\n      const {user} = await this.afaAuth.signInWithPopup(new auth.auth.GoogleAuthProvider());\n      return user;\n    } catch (error) {\n      console.log('error ',error);\n    }\n\n  }\n\n  async resetPassword(email:string):Promise<void>{\n      \n    try {\n      return this.afaAuth.sendPasswordResetEmail(email);   \n    } catch (error) {\n      console.log('error ',error);\n    }\n  }\n\n  \n  async login(email:string,password:string):Promise<User>{\n    try {\n      const {user}= await this.afaAuth.signInWithEmailAndPassword(email,password);\n      this.updateUserData(user);\n      return user;\n    } catch (error) {\n      console.log('Error -> ',error);\n    }\n\n  }\n  async register(email: string, password: string): Promise<User> {\n    try {\n      const { user } = await this.afaAuth.createUserWithEmailAndPassword(email, password);\n      await this.sendVerificationEmail();\n      return user;\n    } catch (error) {\n      console.log('Error->', error);\n    }\n  }\n  async sendVerificationEmail():Promise<void>{\n    try {\n      return (await this.afaAuth.currentUser).sendEmailVerification();\n    } catch (error) {\n      console.log('Error ', error);\n    }\n    \n\n  }\n  isEmailVerified(user: User):boolean{\n    return user.emailVerified === true ? true : false;\n  }\n  async logout():Promise<void>{\n    try {\n      await this.afaAuth.signOut();\n      \n    } catch (error) {\n      console.log('Error ->',error);\n    }\n\n  }\n  private updateUserData(user:User){\n    const userRef: AngularFirestoreDocument<User> = this.afs.doc(`users/${user.uid}`);\n    const data:User = {\n      uid:user.uid,\n      email:user.email,\n      emailVerified:user.emailVerified,\n      displayName:user.displayName,\n    };\n    return userRef.set(data, {merge:true});\n  }\n}\n\n"]}