{"version":3,"sources":["webpack:///src/app/components/login/login.page.html","webpack:///src/app/components/login/login-routing.module.ts","webpack:///src/app/components/login/login.module.ts","webpack:///src/app/components/login/login.page.scss","webpack:///src/app/components/login/login.page.ts","webpack:///src/app/services/notificaciones.service.ts"],"names":["routes","path","component","LoginPageRoutingModule","imports","forChild","exports","LoginPageModule","declarations","LoginPage","authSvc","router","notificationService","route","email","password","login","value","user","isVerified","isEmailVerified","redirectUser","console","log","loginGoogle","uid","navigationExtras","queryParams","navigate","selector","template","NotificacionesService","toastController","alertController","text","create","message","duration","toast","present","header","funcion","cssClass","buttons","role","handler","blah","alert","providedIn"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKf,UAAMA,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE;AAFb,OADqB,CAAvB;;UAWaC,sBAAsB;AAAA;AAAA,O;;AAAtBA,4BAAsB,6DAJlC,+DAAS;AACRC,eAAO,EAAE,CAAC,6DAAaC,QAAb,CAAsBL,MAAtB,CAAD,CADD;AAERM,eAAO,EAAE,CAAC,4DAAD;AAFD,OAAT,CAIkC,GAAtBH,sBAAsB,CAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCGAI,eAAe;AAAA;AAAA,O;;AAAfA,qBAAe,6DAT3B,+DAAS;AACRH,eAAO,EAAE,CACP,4DADO,EAEP,0DAFO,EAGP,0DAHO,EAIP,4EAJO,CADD;AAORI,oBAAY,EAAE,CAAC,qDAAD;AAPN,OAAT,CAS2B,GAAfD,eAAe,CAAf;;;;;;;;;;;;;;;;ACnBb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCYFE,SAAS;AAEpB,2BAAoBC,OAApB,EAAiDC,MAAjD,EAAwEC,mBAAxE,EAA0HC,KAA1H,EAA+I;AAAA;;AAA3H,eAAAH,OAAA,GAAAA,OAAA;AAA6B,eAAAC,MAAA,GAAAA,MAAA;AAAuB,eAAAC,mBAAA,GAAAA,mBAAA;AAAkD,eAAAC,KAAA,GAAAA,KAAA;AAA2B;;AAFjI;AAAA;AAAA,qCAIT,CACV;AALmB;AAAA;AAAA,kCAMNC,KANM,EAMAC,QANA,EAMQ;;;;;;;;;AAEX,6BAAM,KAAKL,OAAL,CAAaM,KAAb,CAAmBF,KAAK,CAACG,KAAzB,EAA+BF,QAAQ,CAACE,KAAxC,CAAN;;;AAAPC,0B;;AACN,0BAAGA,IAAH,EAAQ;AACN;AACMC,kCAFA,GAEa,KAAKT,OAAL,CAAaU,eAAb,CAA6BF,IAA7B,CAFb;AAGN,6BAAKG,YAAL,CAAkBF,UAAlB,EAA6BD,IAA7B;AAED;;;;;;;;AAEDI,6BAAO,CAACC,GAAR,CAAY,QAAZ;;;;;;;;;AAEH;AAlBmB;AAAA;AAAA,0CAoBC;;;;;;;;;AAEF,6BAAM,KAAKb,OAAL,CAAac,WAAb,EAAN;;;AAAPN,0B;;AACN,0BAAGA,IAAH,EAAQ;AACN;AACMC,kCAFA,GAEa,KAAKT,OAAL,CAAaU,eAAb,CAA6BF,IAA7B,CAFb;AAGN,6BAAKG,YAAL,CAAkBF,UAAlB,EAA6BD,IAA7B;AACD;;;;;;;;AAEDI,6BAAO,CAACC,GAAR;;;;;;;;;AAEH;AA/BiB;AAAA;AAAA,uCAiCGJ,UAjCH,EAiCsBD,IAjCtB,EAiC+B;AAC/C;AACA;AACA,gBAAGC,UAAH,EAAc;AACZG,qBAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBL,IAAI,CAACO,GAA9B;AACJ,kBAAIC,gBAAgB,GAAqB;AACvCC,2BAAW,EAAE;AACXF,qBAAG,EAAEP,IAAI,CAACO;AADC;AAD0B,eAAzC;AAMA,mBAAKd,MAAL,CAAYiB,QAAZ,CAAqB,CAAC,cAAD,CAArB,EAAuCF,gBAAvC;AAEE,aAVA,MAUI;AACH,mBAAKf,MAAL,CAAYiB,QAAZ,CAAqB,CAAC,cAAD,CAArB;AACF;AAEA;AAlDiB;;AAAA;AAAA,S;;;;gBAXb;;gBAEkC;;gBAClC;;gBADA;;;;AASInB,eAAS,6DALrB,gEAAU;AACToB,gBAAQ,EAAE,WADD;AAETC,gBAAQ,EAAR;AAAA;AAAA,uGAFS;;;;AAAA,OAAV,CAKqB,GAATrB,SAAS,CAAT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCPAsB,qBAAqB;AAEhC,uCAAmBC,eAAnB,EACSC,eADT,EACyC;AAAA;;AADtB,eAAAD,eAAA,GAAAA,eAAA;AACV,eAAAC,eAAA,GAAAA,eAAA;AACN;;AAJ6B;AAAA;AAAA,4CAKVC,IALU,EAKE;;;;;;;;AACpB,6BAAM,KAAKF,eAAL,CAAqBG,MAArB,CAA4B;AAC9CC,+BAAO,EAAEF,IADqC;AAE9CG,gCAAQ,EAAE;AAFoC,uBAA5B,CAAN;;;AAARC,2B;AAINA,2BAAK,CAACC,OAAN;;;;;;;;;AACD;AAXiC;AAAA;AAAA,uCAafC,MAbe,EAaCJ,OAbD,EAakBK,OAblB,EAa4B;;;;;;;;AAC9C,6BAAM,KAAKR,eAAL,CAAqBE,MAArB,CAA4B;AAC9CO,gCAAQ,EAAE,iBADoC;AAE9CF,8BAAM,EAAEA,MAFsC;AAG9CJ,+BAAO,EAAEA,OAHqC;AAI9CO,+BAAO,EAAE,CACP;AACET,8BAAI,EAAE,UADR;AAEEU,8BAAI,EAAE,QAFR;AAGEF,kCAAQ,EAAE,WAHZ;AAIEG,iCAAO,EAAE,iBAACC,IAAD,EAAU,CAElB;AANH,yBADO,EAQJ;AACDZ,8BAAI,EAAE,SADL;AAEDU,8BAAI,EAAE,IAFL;AAGDC,iCAAO,EAAE,mBAAM;AACbJ,mCAAO;AACR;AALA,yBARI;AAJqC,uBAA5B,CAAN;;;AAARM,2B;;AAsBN,6BAAMA,KAAK,CAACR,OAAN,EAAN;;;;;;;;;AACD;AArCiC;;AAAA;AAAA,S;;;;gBAJR;;gBAAjB;;;;AAIIR,2BAAqB,6DAHjC,iEAAW;AACViB,kBAAU,EAAE;AADF,OAAX,CAGiC,GAArBjB,qBAAqB,CAArB","file":"components-login-login-module-es5.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-title>Login</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n    <ion-card>\\n        <div class=\\\"login-logo\\\">\\n            <img src=\\\"assets/img/logo.png\\\" alt=\\\"Ionic logo\\\">\\n        </div>\\n        <form>\\n            <ion-item lines=\\\"full\\\">\\n                <ion-label position=\\\"floating\\\">Email</ion-label>\\n                <ion-input type=\\\"text\\\" #email required></ion-input>\\n            </ion-item>\\n            <ion-item lines=\\\"full\\\">\\n                <ion-label position=\\\"floating\\\">Password</ion-label>\\n                <ion-input type=\\\"password\\\" #password required></ion-input>\\n            </ion-item>\\n            <ion-row>\\n                <ion-col>\\n                    <ion-button type=\\\"submit\\\" (click)=\\\"onLogin(email, password)\\\" expand=\\\"block\\\">Login</ion-button>\\n                </ion-col>\\n            </ion-row>\\n            <ion-row>\\n                <ion-col>\\n                    <p class=\\\"ion-text-end\\\">\\n                        <a routerLink=\\\"/forgot-password\\\">Olvidaste tu constrasena? </a>\\n                    </p>\\n                </ion-col>\\n            </ion-row>\\n            <span class=\\\"center-span\\\"> or </span>\\n            <ion-row>\\n                <ion-col>\\n                    <ion-button type=\\\"submit\\\" color=\\\"danger\\\" (click)=\\\"onLoginGoogle()\\\" expand=\\\"block\\\">Login with Google\\n                    </ion-button>\\n                </ion-col>\\n            </ion-row>\\n        </form>\\n        <ion-row>\\n            <ion-col>\\n                <p class=\\\"ion-text-end\\\">\\n                    <a routerLink=\\\"/register\\\">Crea una cuenta.. </a>\\n                </p>\\n            </ion-col>\\n        </ion-row>\\n    </ion-card>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    LoginPageRoutingModule\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbG9naW4vbG9naW4ucGFnZS5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { async } from '@angular/core/testing';\nimport { ActivatedRoute, NavigationExtras, Router } from '@angular/router';\nimport { NotificacionesService } from 'src/app/services/notificaciones.service';\nimport { User } from 'src/app/shared/user.interface';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n\n  constructor(private authSvc:AuthService, private router:Router, private notificationService:NotificacionesService,private route: ActivatedRoute,) { }\n\n  ngOnInit() {\n  }\n  async onLogin(email,password){\n    try {\n      const user = await this.authSvc.login(email.value,password.value);\n      if(user){\n        //Todo:checkEmail\n        const isVerified = this.authSvc.isEmailVerified(user);\n        this.redirectUser(isVerified,user);\n               \n      }\n    } catch (error) {\n      console.log('errror',error);\n    }\n  }\n\n    async onLoginGoogle(){\n      try {\n        const user = await this.authSvc.loginGoogle();\n        if(user){\n          //console.log(\"USER  -> \",user);\n          const isVerified = this.authSvc.isEmailVerified(user);\n          this.redirectUser(isVerified,user);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    private redirectUser(isVerified:boolean,user:User){\n      /// redirect -> view client\n      ///ELSE verified your email\n      if(isVerified){\n        console.log(\"UID GOOGLE\",user.uid);\n    let navigationExtras: NavigationExtras = {\n      queryParams: {\n        uid: user.uid, \n      }\n    };\n\n    this.router.navigate(['view-cliente'], navigationExtras);\n\n     }else{\n       this.router.navigate(['verify-email']); \n    } \n\n    }\n  \n\n}\n\n","import { Injectable } from '@angular/core';\nimport { AlertController, ToastController } from '@ionic/angular';\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificacionesService {\n\n  constructor(public toastController: ToastController,\n    public alertController: AlertController\n) { }\nasync notificacionToast(text: string){\n  const toast = await this.toastController.create({\n    message: text,\n    duration: 2000\n  });\n  toast.present();\n}\n\nasync confirmacion(header: string, message: string, funcion?) {\n  const alert = await this.alertController.create({\n    cssClass: 'my-custom-class',\n    header: header,\n    message: message,\n    buttons: [\n      {\n        text: 'Cancelar',\n        role: 'cancel',\n        cssClass: 'secondary',\n        handler: (blah) => {\n          \n        }\n      }, {\n        text: 'Aceptar',\n        role: 'ok',\n        handler: () => {\n          funcion();\n        }\n      }\n    ]\n  });\n\n  await alert.present();\n}\n\n}\n"]}