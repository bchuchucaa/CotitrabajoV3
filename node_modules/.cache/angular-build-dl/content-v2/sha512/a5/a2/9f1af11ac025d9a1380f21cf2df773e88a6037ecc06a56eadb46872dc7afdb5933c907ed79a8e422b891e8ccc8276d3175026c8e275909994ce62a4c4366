{"version":3,"sources":["webpack:///src/app/components/login/login.page.html","webpack:///src/app/components/login/login-routing.module.ts","webpack:///src/app/components/login/login.module.ts","webpack:///src/app/components/login/login.page.scss","webpack:///src/app/components/login/login.page.ts","webpack:///src/app/services/auth.service.ts"],"names":["routes","path","component","LoginPageRoutingModule","imports","forChild","exports","LoginPageModule","declarations","LoginPage","authSvc","router","notificationService","route","email","password","login","value","user","isVerified","isEmailVerified","redirectUser","console","log","loginGoogle","uid","navigationExtras","queryParams","navigate","selector","template","AuthService","afaAuth","afs","user$","authState","pipe","doc","valueChanges","signInWithPopup","auth","GoogleAuthProvider","sendPasswordResetEmail","signInWithEmailAndPassword","updateUserData","createUserWithEmailAndPassword","sendVerificationEmail","currentUser","sendEmailVerification","emailVerified","signOut","userRef","data","displayName","set","merge","providedIn"],"mappings":"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","file":"components-login-login-module-es5.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-title>Login</ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n    <ion-card>\\n        <div class=\\\"login-logo\\\">\\n            <img src=\\\"assets/img/logo.png\\\" alt=\\\"Ionic logo\\\">\\n        </div>\\n        <form>\\n            <ion-item lines=\\\"full\\\">\\n                <ion-label position=\\\"floating\\\">Email</ion-label>\\n                <ion-input type=\\\"text\\\" #email required></ion-input>\\n            </ion-item>\\n            <ion-item lines=\\\"full\\\">\\n                <ion-label position=\\\"floating\\\">Password</ion-label>\\n                <ion-input type=\\\"password\\\" #password required></ion-input>\\n            </ion-item>\\n            <ion-row>\\n                <ion-col>\\n                    <ion-button type=\\\"submit\\\" (click)=\\\"onLogin(email, password)\\\" expand=\\\"block\\\">Login</ion-button>\\n                </ion-col>\\n            </ion-row>\\n            <ion-row>\\n                <ion-col>\\n                    <p class=\\\"ion-text-end\\\">\\n                        <a routerLink=\\\"/forgot-password\\\">Olvidaste tu constrasena? </a>\\n                    </p>\\n                </ion-col>\\n            </ion-row>\\n            <span class=\\\"center-span\\\"> or </span>\\n            <ion-row>\\n                <ion-col>\\n                    <ion-button type=\\\"submit\\\" color=\\\"danger\\\" (click)=\\\"onLoginGoogle()\\\" expand=\\\"block\\\">Login with Google\\n                    </ion-button>\\n                </ion-col>\\n            </ion-row>\\n        </form>\\n        <ion-row>\\n            <ion-col>\\n                <p class=\\\"ion-text-end\\\">\\n                    <a routerLink=\\\"/register\\\">Crea una cuenta.. </a>\\n                </p>\\n            </ion-col>\\n        </ion-row>\\n    </ion-card>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    LoginPageRoutingModule\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbG9naW4vbG9naW4ucGFnZS5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { async } from '@angular/core/testing';\nimport { ActivatedRoute, NavigationExtras, Router } from '@angular/router';\nimport { NotificacionesService } from 'src/app/services/notificaciones.service';\nimport { User } from 'src/app/shared/user.interface';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n\n  constructor(private authSvc:AuthService, private router:Router, private notificationService:NotificacionesService,private route: ActivatedRoute,) { }\n\n  ngOnInit() {\n  }\n  async onLogin(email,password){\n    try {\n      const user = await this.authSvc.login(email.value,password.value);\n      if(user){\n        //Todo:checkEmail\n        const isVerified = this.authSvc.isEmailVerified(user);\n        this.redirectUser(isVerified,user);\n               \n      }\n    } catch (error) {\n      console.log('errror',error);\n    }\n  }\n\n    async onLoginGoogle(){\n      try {\n        const user = await this.authSvc.loginGoogle();\n        if(user){\n          //console.log(\"USER  -> \",user);\n          const isVerified = this.authSvc.isEmailVerified(user);\n          this.redirectUser(isVerified,user);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n\n    private redirectUser(isVerified:boolean,user:User){\n      /// redirect -> view client\n      ///ELSE verified your email\n      if(isVerified){\n        console.log(\"UID GOOGLE\",user.uid);\n    let navigationExtras: NavigationExtras = {\n      queryParams: {\n        uid: user.uid, \n      }\n    };\n\n    this.router.navigate(['view-cliente'], navigationExtras);\n\n     }else{\n       this.router.navigate(['verify-email']); \n    } \n\n    }\n  \n\n}\n\n","import { Injectable } from '@angular/core';\nimport { User } from '../shared/user.interface';\nimport { AngularFireAuth} from '@angular/fire/auth';\nimport auth from 'firebase/app';\n\nimport {AngularFirestore,AngularFirestoreDocument} from '@angular/fire/firestore'\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  public user$:Observable<User>;\n\n  constructor(public afaAuth:AngularFireAuth, private afs:AngularFirestore) { \n    this.user$ = this.afaAuth.authState.pipe(\n      switchMap((user) => {\n        if(user){\n          this.afs.doc<User>(`users/${user.uid}`).valueChanges();\n        }\n        return of(null);\n      })\n    );\n  }\n\n  async loginGoogle():Promise<User>{\n    try {\n      const {user} = await this.afaAuth.signInWithPopup(new auth.auth.GoogleAuthProvider());\n      return user;\n    } catch (error) {\n      console.log('error ',error);\n    }\n\n  }\n\n  async resetPassword(email:string):Promise<void>{\n      \n    try {\n      return this.afaAuth.sendPasswordResetEmail(email);   \n    } catch (error) {\n      console.log('error ',error);\n    }\n  }\n\n  \n  async login(email:string,password:string):Promise<User>{\n    try {\n      const {user}= await this.afaAuth.signInWithEmailAndPassword(email,password);\n      this.updateUserData(user);\n      return user;\n    } catch (error) {\n      console.log('Error -> ',error);\n    }\n\n  }\n  async register(email: string, password: string): Promise<User> {\n    try {\n      const { user } = await this.afaAuth.createUserWithEmailAndPassword(email, password);\n      await this.sendVerificationEmail();\n      return user;\n    } catch (error) {\n      console.log('Error->', error);\n    }\n  }\n  async sendVerificationEmail():Promise<void>{\n    try {\n      return (await this.afaAuth.currentUser).sendEmailVerification();\n    } catch (error) {\n      console.log('Error ', error);\n    }\n    \n\n  }\n  isEmailVerified(user: User):boolean{\n    return user.emailVerified === true ? true : false;\n  }\n  async logout():Promise<void>{\n    try {\n      await this.afaAuth.signOut();\n      \n    } catch (error) {\n      console.log('Error ->',error);\n    }\n\n  }\n  private updateUserData(user:User){\n    const userRef: AngularFirestoreDocument<User> = this.afs.doc(`users/${user.uid}`);\n    const data:User = {\n      uid:user.uid,\n      email:user.email,\n      emailVerified:user.emailVerified,\n      displayName:user.displayName,\n    };\n    return userRef.set(data, {merge:true});\n  }\n}\n\n"]}